#训练模型
import tensorflow as tf
#Prepare to feed input, i.e. feed_dict and placeholders
w1 = tf.placeholder("float", name="w1")
w2 = tf.placeholder("float", name="w2")
b1= tf.Variable(2.0,name="bias")
b2= tf.multiply(2.0, w1, name='b2')
feed_dict ={w1:4,w2:8}
#Define a test operation that we will restore
w3 = tf.add(w1,w2)
w4 = tf.multiply(w3,b1,name="op_to_restore")
sess = tf.Session()
sess.run(tf.global_variables_initializer())
#Create a saver object which will save all the variables
saver = tf.train.Saver()
#Run the operation by feeding input
print(sess.run(w4,feed_dict = feed_dict))  #==》24
print(sess.run(b2,feed_dict = feed_dict)) #==》8
#Prints 24 which is sum of (w1+w2)*b1 
#Now, save the graph
saver.save(sess, 'my_test_model/model.ckpt',global_step=1000)

#恢复模型
import tensorflow as tf
sess=tf.Session()    
#First let's load meta graph and restore weights
saver = tf.train.import_meta_graph('my_test_model/model.ckpt-1000.meta')
saver.restore(sess,tf.train.latest_checkpoint('./my_test_model/'))
# Access saved Variables directly
print(sess.run('bias:0'))  #==》2.0
# This will print 2, which is the value of bias that we saved
# Now, let's access and create placeholders variables and
# create feed-dict to feed new data
graph = tf.get_default_graph()

# for op in graph.get_operations():  
#     print(op.name,op.values())  
w1 = graph.get_tensor_by_name("w1_1:0")
w2 = graph.get_tensor_by_name("w2:0")
b2 = graph.get_tensor_by_name('b2:0')
feed_dict ={w1:13.0, w2:17.0}
# #Now, access the op that you want to run. 
op_to_restore = graph.get_tensor_by_name("op_to_restore:0")
print (sess.run(op_to_restore,feed_dict= feed_dict)) #==》60.0
print (sess.run(b2,feed_dict= {w1:2})) #==》4.0
#This will print 60 which is calculated
